esphome:
  name: bedroom-fan
  includes:
    - interpolation.h

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable Home Assistant API
# api:
mqtt:
  id: mqtt_cli
  broker: {{MQTT_IP}}
  username: {{MQTT_USER}}
  password: {{MQTT_PASS}}

# Enable OTA updates
ota:
  platform: esphome

button:
  - platform: safe_mode
    name: "Restart (Safe Mode)"

# # Enable WiFi (replace with your SSID and password)
wifi:
  power_save_mode: LIGHT
  output_power: 15db
  ssid: "{{WIFI_SSID}}"
  password: "{{WIFI_PSK}}"
  ap:  # Fallback AP if WiFi fails
    ssid: "{{FALLBACK_AP_SSID}}"
    password: "{{FALLBACK_AP_PSK}}"

# Logger and Web server (optional for debugging)
logger:
  level: INFO
web_server:

# PWM Outputs on GPIOs (adjust pins based on your setup)
output:
  - platform: ledc
    pin: GPIO6
    id: pwm_1
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO8
    id: pwm_2
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO10
    id: pwm_3
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO21
    id: pwm_4
    frequency: 19531Hz

# Define the DHT11 sensor
sensor:
  - platform: dht
    id: radiator_dht11
    pin: GPIO0
    model: DHT11
    temperature:
      name: "Radiator Temperature"
      id: radiator_temperature
      on_value:
        then:
          - script.execute: update_fan_speed
    humidity:
      name: "Radiator Humidity"
      id: radiator_humidity
    update_interval: 15s

# not working
  # - platform: pulse_counter 
  #   pin:
  #     number: GPIO5
  #     mode: INPUT_PULLUP
  #   unit_of_measurement: 'RPM'
  #   id: speed_1
  #   name: speed 1
  #   update_interval: 5s
  #   filters:
  #     - multiply: 0.5

  - platform: pulse_counter
    pin:
      number: GPIO7
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_2
    name: speed 2
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_3
    name: speed 3
    update_interval: 5s
    filters:
      - multiply: 0.5
      
  - platform: pulse_counter
    pin:
      number: GPIO20
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_4
    name: speed 4
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: mqtt_subscribe
    name: "Tado Heating"
    topic: "homeassistant/sensor/schlafzimmer_heating/state"
    id: heating
    on_value:
      then:
        - script.execute: update_fan_speed

  - platform: mqtt_subscribe
    name: "Tado Window Open"
    topic: "homeassistant/binary_sensor/schlafzimmer_window/state"
    id: window
    on_value:
      then:
        - script.execute: update_fan_speed

# Expose PWM controls
fan:
  - platform: speed
    output: pwm_1
    name: "Fan 1"
  - platform: speed
    output: pwm_2
    name: "Fan 2"
  - platform: speed
    output: pwm_3
    name: "Fan 3"
  - platform: speed
    output: pwm_4
    name: "Fan 4"

script:
  - id: update_fan_speed
    then:
      - lambda: |- 
          float speed = 0.0f;
          
          bool window_is_on = id(window).state > 0.5f;
          float heating_value = id(heating).state;
          float temperature = id(radiator_temperature).state;
          if (!window_is_on) {
            // Set fan speed depending on thermostat heating value
            float min_heating = 10.0f;
            float max_heating = 100.0f;
            float min_heating_speed = 0.35f;
            float max_heating_speed = 0.90f;
            if (heating_value >= min_heating) {
              speed = utils::linear_interpolation(heating_value, min_heating, min_heating_speed, max_heating, max_heating_speed);
            }

            // Set fan speed depending on actual radiator temperature
            float min_radiator_temp = 23.0f;
            float max_radiator_temp = 26.5f;
            float min_temp_speed = 0.35f;
            float max_temp_speed = 1.0f;
            if (temperature >= min_radiator_temp) {
              float temp_speed = utils::linear_interpolation(temperature, min_radiator_temp, min_temp_speed, max_radiator_temp, max_temp_speed);
              speed = max(speed, temp_speed); // Use max to ensure we don't reduce speed from heating value
            }
          }
          
          //log all values
          auto window_str = window_is_on ? " Window open" : "";
          ESP_LOGI("update_fan_speed", "Heat %3.0f%%, Temp %.1fÂºC, Speed %3.0f%% %s", heating_value, temperature, 100*speed, window_str);

          // apply to all 4 pwm outputs sequentially
          id(pwm_1).set_level(speed);
          id(pwm_2).set_level(speed);
          id(pwm_3).set_level(speed);
          id(pwm_4).set_level(speed);
