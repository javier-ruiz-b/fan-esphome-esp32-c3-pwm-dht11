esphome:
  name: bedroom-fan

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable Home Assistant API
# api:
mqtt:
  id: mqtt_cli
  broker: {{MQTT_IP}}
  username: {{MQTT_USER}}
  password: {{MQTT_PASS}}

# Enable OTA updates
ota:
  platform: esphome

button:
  - platform: safe_mode
    name: "Restart (Safe Mode)"

# # Enable WiFi (replace with your SSID and password)
wifi:
  power_save_mode: LIGHT
  output_power: 15db
  ssid: "{{WIFI_SSID}}"
  password: "{{WIFI_PSK}}"
  ap:  # Fallback AP if WiFi fails
    ssid: "{{FALLBACK_AP_SSID}}"
    password: "{{FALLBACK_AP_PSK}}"

# Logger and Web server (optional for debugging)
logger:
  level: INFO
web_server:

# PWM Outputs on GPIOs (adjust pins based on your setup)
output:
  - platform: ledc
    pin: GPIO6
    id: pwm_1
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO8
    id: pwm_2
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO10
    id: pwm_3
    frequency: 19531Hz
  - platform: ledc
    pin: GPIO21
    id: pwm_4
    frequency: 19531Hz

# Define the DHT11 sensor
sensor:
  - platform: dht
    id: radiator_dht11
    pin: GPIO0
    model: DHT11
    temperature:
      name: "Radiator Temperature"
      id: radiator_temperature
      on_value:
        then:
          - script.execute: update_fan_speed
    humidity:
      name: "Radiator Humidity"
      id: radiator_humidity
    update_interval: 15s

# not working
  # - platform: pulse_counter 
  #   pin:
  #     number: GPIO5
  #     mode: INPUT_PULLUP
  #   unit_of_measurement: 'RPM'
  #   id: speed_1
  #   name: speed 1
  #   update_interval: 5s
  #   filters:
  #     - multiply: 0.5

  - platform: pulse_counter
    pin:
      number: GPIO7
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_2
    name: speed 2
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_3
    name: speed 3
    update_interval: 5s
    filters:
      - multiply: 0.5
      
  - platform: pulse_counter
    pin:
      number: GPIO20
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: speed_4
    name: speed 4
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: mqtt_subscribe
    name: "Tado Heating"
    topic: "homeassistant/sensor/schlafzimmer_heating/state"
    id: heating
    on_value:
      then:
        - script.execute: update_fan_speed

  - platform: mqtt_subscribe
    name: "Tado Window Open"
    topic: "homeassistant/binary_sensor/schlafzimmer_window/state"
    id: window
    on_value:
      then:
        - script.execute: update_fan_speed

# Expose PWM controls
fan:
  - platform: speed
    output: pwm_1
    name: "Fan 1"
  - platform: speed
    output: pwm_2
    name: "Fan 2"
  - platform: speed
    output: pwm_3
    name: "Fan 3"
  - platform: speed
    output: pwm_4
    name: "Fan 4"

script:
  - id: update_fan_speed
    then:
      - lambda: |- 
          float speed = 0;
          
          bool window_is_on = id(window).state > 0.5f;
          float heating_value = id(heating).state;
          float temperature = id(radiator_temperature).state;
          if (window_is_on) {
            speed = 0.0f;
          } else if (heating_value > 80) {
            speed = 0.8f;
          } else if (heating_value > 60) {
            speed = 0.7f;
          } else if (heating_value > 30) {
            speed = 0.6f;
          } else if (heating_value > 15) {
            speed = 0.5f;
          }

          if (temperature > 37.0f) {
            speed = max(speed, 0.9f);
          } else if (temperature > 30.0f) {
            speed = max(speed, 0.8f);
          } else if (temperature > 28.0f) {
            speed = max(speed, 0.7f);
          } else if (temperature > 26.0f) {
            speed = max(speed, 0.4f);
          } else if (temperature > 24.0f) {
            speed = max(speed, 0.3f);
          }

          //log all values
          ESP_LOGI("update_fan_speed", "Window: %.2f, Heating: %.2f, Temp: %.2f, Speed: %.2f", window_is_on ? 1.0f : 0.0f, heating_value, temperature, speed);


          // apply to all 4 pwm outputs sequentially
          id(pwm_1).set_level(speed);
          id(pwm_2).set_level(speed);
          id(pwm_3).set_level(speed);
          id(pwm_4).set_level(speed);
